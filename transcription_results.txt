--- 文件: segment_1757409933.wav ---
平民百姓和商人牵扯到里头 形成了对于一个战争伦理的巨大的疑问和考验这个也是很多人不赞同吕蒙 甚至给吕蒙先生泼脏水一个重要原因那这个过程咱要把它掰开揉碎说呢 咱得从头来吕蒙呢 当年呢 他在东吴的时候 他开始跟着孙权的哥哥孙策后来呢 孙策死了 他跟着孙权 孙权就劝他说 你呀是一员猛将我可以重用你 可有一样啊 你这文化太低了 抖大字不十几个呢 你这不行啊吕蒙说 我上阵杀敌主攻 我不用看书吧 不用学文化 哎 那不对啊你有功 你学文化对自己呀是个很大提升 你看我一天孙权说我这忙的急火攻心的 我天天回家里我还看会儿书呢那你就更应该学习了这时候吕蒙一听 可也对啊 你注意这时候对他有称号叫吴下阿蒙也有叫吴下阿蒙的就他这时候呢 在江南一战 称他为吴下阿蒙是对他有讽刺意味 意思你就是义勇之夫成于有个吴下阿蒙吗 就这说这个 结果这个吕蒙呢 回去开始就认真看书 他不光看书 还勤于思考所以后来大都督鲁肃到这一带见他的时候 俩人关系不错但鲁肃也瞧不上了 你这还没文化 结果没想到他跟鲁肃俩人谈到整个江东的形势的时候鲁肃是大失一惊因为什么 鲁肃一直是孙刘联盟的坚定的维护者咱俩家你看 这荆州他不还不还嘛 咱也不能破坏盟约 否则孙刘两家拆该怎么办 那曹操打了咱单个都不是个儿 你咱们有合作先例 赤壁大战 把曹操顺黄二道给打跑了 你看但是吕蒙说这不对所以你要这么看的 那就不是动态的考察问题 当初啊 曹操统领81万兵丁53元上将直接打到咱们江南来 啊 进者讽刺罚罪 经费



--- 文件: segment_force_1757410199.wav ---
男子留从速守 其方至水军八十万余 与将军汇列于五咱俩家都打不过那是一损俱损 一荣俱荣咱联合现在情况发生变化了首先一个刘备借咱荆州不还他不仗义第二个关羽在荆州飞扬跋扈咱们主公要把这个儿子想娶关羽的女儿关羽说的是什么胡女焉能嫁犬子你看他骂咱主公是狗你这就不合适了再有一点你想过没有刘备娶了西蜀背弃盟约不还荆州

--- 文件: segment_force_1757410235.wav ---
北上又拿下了汉中 自立汉中王这还不算 关羽现在虎视曹操要虎视江东他按捺不住这个人而且对我们来说你别忘了咱们在建业一带就南京一带咱是长江的下游关羽具有荆州是占了中上游的便宜顺江而下有如居高临下势如破竹他一旦翻脸长江随时天谦可守曹操可守不住蜀汉人家顺江而下势如破竹咱无险可守啊所以与其被动

--- 文件: segment_force_1757410271.wav ---
等待关羽做大 蜀汉强大他与曹魏并立我们东吴就变最弱小的咱不如主动出击这番话把鲁肃说的很服更令他惊叹的是什么呢想不到你个吴下阿蒙短短几日不见你有这等见识吕蒙就说识别三日当刮目相看你看成语识别三日当刮目相看说吕蒙谁呢那么吕蒙这套的战略他终于找到了机会试试鲁肃病逝之后

--- 文件: segment_1757410305.wav ---
这是建安二十四年 公元二百一十九年吕蒙逮到了机会关羽这时候北防跟曹操打就刚才我说秦玉晋 展芳德 水燕弃军吕蒙认为时机成熟了他跟孙权说什么我在这个荆州这带路口镇守这个关羽对我也不放心我看他在荆州又布置了防守兵力他可不是说是单纯的打曹操我就不管荆州了那关羽还是有套路那怎么办呢当时诱敌之计麻痹他

--- 文件: segment_force_1757410336.wav ---
Atera is the IT painkillerRemote monitoring and managementRemote accessHelpdesk and ticketingSmart animationsPatchingSoftware deploymentScriptingAnd the amazing thing is that it does all thisWhile still being easy to useIt's magicalJust this clean, intuitive UIWhere everything is where it's supposed to beAnd does what it's meant to doSorryI get emotional撑病回建议回南京养病去我说不行了我病得不行我得回来

--- 文件: segment_force_1757410370.wav ---
让谁替我守路口呢?陆迅咱们都知道后来陆迅是火烧连营七百里无数一零之战大获全胜也成了继承东吴大都督之位的顶级将领可那会儿陆迅呢乃缓口小儿岁数小 关羽是很轻视这种小家伙的说你让陆迅替我守路口这样关羽就会放松警惕果不其然 这关公跟曹操打出一听那边什么的吕蒙有病 回建业养病去了派了一个缓口小儿陆迅来守路口这行了 放心了 告诉南京

--- 文件: segment_force_1757410404.wav ---
公安这些各地方的守兵来来来跟我打仗吧我这前线兵力不足这样荆州就变得空虚了这时候吕蒙齐齐荆州白衣渡江什么意思呢把这个兵甲呀藏到船里头把这船化装成啊在长江上经商做买卖的船这是很常见的然后呢船上摇篓的之人呢白衣渡江有人说是不是换上白船的衣服啊这不全对白衣其实另一种写法是便衣就穿上老百姓的衣服商人的衣服说那为什么他叫白衣

--- 文件: segment_force_1757410440.wav ---
你可记住了晚间出来走路的话如果这个人是个夜行人非奸即盗他一定穿黑衣服和茫茫夜色融为一体要晚上出来穿白衣服那至少说明什么我光明磊落我不怕你看着所以你看古龙小说里写的武林高手晚上出来人穿白衣服像西门吹雪叶固城洛阳凤都敢穿白衣服为什么我手艺高我不怕你所以这个白衣杜江穿着这种衣服来是告诉荆州的将士你看你看我就是个普通人茫茫江上啊大物质其实你离老远

--- 文件: segment_force_1757410471.wav ---
就能看出百億是我的經商的幹活你得不要動我今天我們來聊聊agent它也叫AI agent這是一個隨著大模型熱潮而興起的重要概念雖然agent這個詞現在被頻繁地提起但它究竟是什麼是如何運作的很多人其實並不清楚所以在這個視頻裏面我會帶你徹底搞明白這兩個問題在正式開始前我需要先提醒一下視頻前半部分的一些內容和我之前發過的MCP終極指南翻外篇有所重合如果你已經看過那篇了那這個視頻就建議從React上看

--- 文件: segment_force_1757410503.wav ---
在下一次代碼的實現部分開始觀看大家都知道現在的大模型比如GPT-4O DeepSeek之類的它們回答問題很厲害 邏輯也很強但平時我們用它們的時候會發現一個限制它們無法感知或者是改變外界環境這句話是什麼意思呢我舉一個例子來給你說明一下比如你想讓GPT-4O幫你寫一個貪吃蛇遊戲它確實可以給你代碼 但是寫完之後像把代碼寫入到文件這種事情還是得你自己動手也就是說大模型無法改變外界環境而且有沒有一種可能你其實已經有一些貪吃蛇的代碼了如果你想讓模型幫你基於這些代碼來改寫增加貪吃蛇的可能性

--- 文件: segment_force_1757410533.wav ---
在這種情況下你就必須把你已有的代碼複製給GPT-4O才行我們不主動告訴GPT-4O的話它是無法自己查到這些代碼的換句話說這就是大模型無法感知外界環境的體現所以綜合來看大模型是無法感知或者是改變外部環境的那有沒有辦法解決掉這個問題呢其實是有的我們給它接上對應的工具就可以了比如說是讀寫文件內容的工具查看文件列表的工具運行終端命令的工具工具就像是大模型的感官和四肢有了它有了它大模型就可以自己查詢已有文件自己寫入代碼自己運行程序整個過程不需要我們查什麼

--- 文件: segment_force_1757410564.wav ---
完全自動化像這樣把一個大模型和一堆工具組裝起來變成一個能感知和改變外界環境的智能程序我們就稱它為agent通常agent用一個機器人來表示這與大模型的大腦圖標形成了鮮明的對比畢竟agent有了感官和四肢能自己獨立做事了就像一個機器人一樣agent有很多類型前面舉的是編程類的agent它可以用來開發程序除此之外還有一些agent可以做PPT有一些agent可以深度搜索等等等等總的來說agent的類型有很多擅長的領域也各不相同下面我們來舉幾個具體點的例子第一個例子便是

--- 文件: segment_force_1757410594.wav ---
是大名鼎鼎的Cursor相信即使你没有使用过它也多多少少听说过它的存在Cursor是一个用于编程的agent我们只需要给它提交任务它便会利用大模型和各种工具来帮我们写代码直至完成任务整个过程中你顶多点个确定按钮别的基本上什么也不用动再举一个例子前一阵子比较火的Manus他也是一个agent在这个例子中用户希望Manus帮他比较几个手机的性能 照相等能力为了解决用户的问题Manus会生成执行计划搜索并浏览相关网页最后把报告整理成一个页面展示给用户看整个过程基本上也不需要用户插手Manus利用大模型和一些工具就能够帮助你

--- 文件: segment_force_1757410625.wav ---
就可以解决掉用户的问题好 相信到这里你对Agent就有一个大致的了解了下面我们就来讲讲Agent的运行模式

--- 文件: segment_force_1757410655.wav ---
多個桌子和不同的隊伍都來自同一個地方沒有額外的費用沒有需要的添加哇更沒有沉悶的日常站臺搖擺一下我們的Shuffle模式並獲得各隊員的AI能力提示沒什麼可以說是好玩的像是無法預測的公開說話MondayDev的GitHub融合使用了強大的自動化以提供你全面的視野進入日常的進步同時讓你的開發者留在GitHub並專注於核心而不是手動更新MondayDev計劃、追蹤和晶片軟件快速獲得免費試用

--- 文件: segment_1757410659.wav ---
No credit card needed.

--- 文件: segment_force_1757410698.wav ---
我打算用 Temporal 建立一個 AI 代碼代碼我代碼的好處是代碼代碼的運作程序本身是完全典型的我只是將這些代碼作為代碼的輸入也就是幾百個 Python 代碼的輸入所有的代碼都是 LLM 代碼從這裡我可以看到我的代碼運作正在運作你可以看到活動歷史正在補充我正在提醒代碼,代碼正在回應代碼已經決定有足夠的資訊來運行第一項工具我們來確認一下,代碼會運行另外,我會要求代碼在任何一邊代碼可以在任何一邊

--- 文件: segment_force_1757410729.wav ---
我希望能够更加享受澳大利亚它在旁边增加了几天它知道我要去澳大利亚从洛杉矶你看到搜索航班正在运行现在它正在找到真正的航班用真正的API现在这个工具正在使用真正的Stripe API所以如果我点击这份邮件你会看到Stripe我的邮件Agent的运行有很多种模式其中最有名的一种是ReactReact本身是一个缩写它的全称是Reasoning and Acting也就是思考与行动React可能是目前使用最为广泛的Agent运行模式

--- 文件: segment_force_1757410760.wav ---
如果你要学习agent的实现原理那你就绝对绕不开react这个模式最初由2022年10月份的一篇论文提出虽然距离现在已经有接近三年的时间了但是它所提出的agent运行模式仍然有着非常广泛的使用说它是目前使用最为广泛的agent运行模式也不为过在这种模式下用户先提交任务然后agent先做思考英文是thought他思考后会决定是否调用工具如果是的话他便会去调用合适的工具比如读取文件写入文件内容之类的这一步是行动英文是action在行动后agent会去查看工具的执行结果比如所读取的文件内容写入是否成功等等如果要去试用的话会直接直接去创作然后就会创作而且你用的协议是有先前的条件比如说要创造要创造或者创造如果要创造创造创造创造创造创造创造创造创造创造创造然后创造创造创造创造创造创造创造创造

--- 文件: segment_force_1757410792.wav ---
REACT稱這一步是觀察也就是觀察工具執行結果英文是observation在觀察之後REACT會繼續思考它會再次判斷是否需要調用工具如果還是需要的話它就會繼續重複之前所說的行動 觀察 思考的流程直到某個時刻它認為不需要再調用工具了可以直接給出結論了此時它就輸出了最終答案英文是final answer整個流程到此結束所以從這個流程圖裡面也可以看出REACT流程的核心步驟是thought action observation和final answer記住這幾個詞我們後面會用到了解了REACT模式的流程之後下一個問題就是這種REACT模式是如何實現的

--- 文件: segment_force_1757410826.wav ---
为什么模型拿到用活型就这么训练的吗不是的这跟模型的训练过程关系不大大部分奥秘其实都集中在系统提示词上系统提示词是跟用户问题一起送给模型的提示词它规定了模型的角色运行时要遵守的规则以及各种环境的信息等等比如我们在系统提示词里面写你的回答必须包含两个XML标签一个叫做Question用于存放用户的问题一个叫做Answer用于存放你的回答你把这个系统提示词和用户问题一起发给大模型在这种情况下大模型便会遵循这种规范来输出答案上面举的是一个简单的例子如果你想要模型按照React模式返回答案的话那你的系统提示词就会是

--- 文件: segment_force_1757410856.wav ---
会更加复杂一些我这里就有一个具体的例子这个系统提示词大致有五个部分分别是职责描述 事例可用工具 注意事项和环境信息我们来仔细读一下首先看职责描述部分你需要解决一个任务为此你需要将任务分解为多个步骤对于每个步骤首先使用thought思考要做什么然后使用action调用一个工具工具的执行结果会通过observation返回给你持续这个思考和行动的过程直到你有足够多的信息来提供final answer这一段话其实就是在描述我们刚才的那个react执行流程图我们希望大模型按照react这个标准来运作后面则是专门说明

--- 文件: segment_force_1757410886.wav ---
进行了每个标签的功能紧接着我举了几个例子比如说第一个用户的问题是Eiffel 铁塔有多高模型就先用soft标签做了一些思考然后再使用action调用了gethack工具传入的参数是Eiffel铁塔工具的返回结果通过observation返回给了模型模型接到结果之后它再做了一些思考然后就给出了最终的答案这个就是一个非常典型的react流程后面的例子二其实也是类似只不过是它调用工具调了两遍这个我们就不细说了我这里列举了一些可用的工具分别用于读取文件内容下期视频我们再来解读

--- 文件: segment_force_1757410918.wav ---
写入文件内容和运行终端命令都是非常长的功能然后我们列举了一些注意事项就是在这里而且告诉了大模型相关的一些环境信息比如说是当前的操作系统目录和目录下的文件列表等等下面我们就来演示一下如何使用这个系统提示词我们用DeepSeek来举例我们先把我们的系统提示词复制一下然后粘贴进来作为用户输入的一部分之后再在后面加上具体要完成的任务写一个弹射游戏使用HTML CSS和JS实现代码分别放在不同的文件中

--- 文件: segment_force_1757410950.wav ---
DeepSeek并没有提供单独提交系统提示词的地方所以我们就把系统提示词和用户任务合在一起当成一条消息提交给它这样的处理方式在大多数的情况下也是没有问题的模型依然能够按照预期运行好 让我们提交任务可以看到DeepSeek开始运行了让我们稍等一下 让它运行完毕可以看出它找我们的要求先在Source标签里面思考了一下然后它使用Action标签请求调用Riteofall工具来写入index.html文件这后面就是具体的文件内容了大家注意我的措辞 大模型请求调用工具这里体现的是请求两个字大模型本身是不能调用工具的调用工具的是agent的工具调用组件这里大模型只能是请求现在如果运行的是一个真的agent的模型那么我们就要试一试我们可以看到这些模型的主要功能都是用于调用Riteofall工具比如说是Riteofall工具或者说是Riteofall工具的主要功能这些都是用于调用Riteofall工具我们可以看到这些模型的主要功能都是用于调用Riteofall工具比如说是Riteofall工具的主要功能

--- 文件: segment_1757410973.wav ---
它便会去调用工具背后的writefile函数写入HTML文件内容不过我们现在在模拟我们就假设调用已经完成了并且假设工具的返回结果是写入成功所以我们回复observation写入成功拿到这个结果后DeepSeek又开始运行了这次它还是先用sock标签思考了一下然后再使用action标签请求写入CSS文件的内容我们照例回复写入成功DeepSeek又开始返回了让我们稍等一下

--- 文件: segment_force_1757411009.wav ---
可以看出DeepSeek还是先用thought思考再用action请求写入JS文件的内容我们还是回复写入成功然后DeepSeek的返回就有了些变化因为三个必要的文件都已经写入完成了不需要再调用工具了因此DeepSeek在thought之后返回了一个final answer整个回答就彻底结束了你看这就是react模式真正运行时的节奏每一步都按照系统提示词的要求来thought action observationthought action observation一直到任务完成此时会输出thought和final answer系统提示词就相当于给模型安排了一个迷你剧本前面我们用DeepSeek演示了一个agent的运行流程可以看到整个流程的关键在于系统提示词它决定了模型该如何运行

--- 文件: segment_1757411043.wav ---
其实在这个系统提示词的基础上再加上一些配套的代码我们就可以搭建出一个真正可用的React Agent实际上我已经把这个Agent写好了就放在我的GitHub仓库里有需要的同学可以自行获取接下来我先演示一下这个Agent的使用过程随后再带大家一起看一遍它的代码我已经进入到这个Agent所处的项目目录了我们先执行一下Tree命令看一下这个项目目录里面都有什么文件这里文件很多但实际上你只有两个文件需要留意一下第一个是Agent.py文件这个文件里面就写了我们的Agent的代码我们等会要运行的就是这个文件另外一个是Snake文件夹它里面什么也没有我用Tree命令给你证实下

--- 文件: segment_force_1757411075.wav ---
可以看出确实没有任何文件等会我就会让Agents把代码写入到这个文件夹里面好 介绍完毕下面我们来执行一下这个Agents让你看看它是如何运作的首先我们启动一下这个Agents我们用的命令是ub run agent.py snake前面的ub run agent.py就是用来启动agent.py文件的后面的snake是agent.py这个脚本的第一个参数意思是告诉agent.py它要操作的项目目录是snake代码就写在那里面agent.py首先向我们询问需要完成的任务我们的任务就是写一个贪吃车游戏使用html css和js实现代码分别放在不同的文件中回转agent.py已经开始运行了它现在正在运行

--- 文件: segment_force_1757411109.wav ---
在请求大模型我这里采用了同步返回的机制所以需要等模型把所有内容都生成完毕之后才能看到结果其实也可以用流逝返回的模型返回几个字就能看到几个字这样可能效果更好一点不过代码的复杂度会增加所以综合选行之后我就没有使用流逝返回好看到第一轮的结果了我们的结果一共是包含三个部分thoughtactionobservation跟我们之前在deepseek那里看到的一模一样这里的action是请求调用rightoffile工具写入index.html文件后面的observation显示的就是具体的调用结果了写入成功注意啊这个写入成功可不是模拟的这是真的执行了rightoffile工具工具也真的返回了写入成功这几个字好

--- 文件: segment_1757411126.wav ---
这个是第一部分我们把滚动条往下拉一拉看一下剩下的部分是个什么样子的后面的流程也基本类似可以看到在observation之后agent会再次进行求模型然后agent就又进行了一段thoughtactionobservation这一轮写入的是css我们再把滚动条往下拖一拖

--- 文件: segment_1757411145.wav ---
在这里我们就可以看到第三轮的Thoughts,Action,Observation这次写入的是JS最后所有文件都写完之后它会给出Thoughts和FinalAnswer整个流程就结束了再看看Snake文件夹确实三个文件都有了执行index.html看看游戏能不能玩

--- 文件: segment_1757411174.wav ---
可以看到界面出来了 我们动一下确实也是能动的然后吃一个红色的方块也是可以吃的左上角是分数 看来运转得非常顺畅从这个结果中也可以判断出我们这个agent做得非常成功完全可以作为一个简化版的cloud code来使用下面我们来看一下这个agent的具体代码我们首先从入口处看起这里面的project directory就是我们传给agent pi文件的第一个参数也就是snake那个文件夹tools代表可用的工具列表我们这里给出了三个分别用于读取文件写入文件和运行终端命令这些都是很实用的函数我们可以大体看一下

--- 文件: segment_force_1757411206.wav ---
这个是读取文件这个是写入文件函数这个是运行终端命令从这里可以看出工具确实就是函数让我们回到原来的主链路继续往下看这里的react-agent便是这个文件的核心了它是一个类构造这个类的时候需要提供三个参数第一个是工具列表这个我们前面已经构建好了这里直接传了进来第二个是我们要用的模型我们这里用的是GPD 4O第三个是箱目目录也就是Snake文件夹传好了这三个参数之后我们便获取到了一个agent的变量之后我们会提示用户输入任务内容然后我们把用户任务传入agent.run函数这个函数是react-agent的核心

--- 文件: segment_force_1757411238.wav ---
调用它就相当于是启动了这个agent之前提到的sortaction observation和final answer都是在这个函数内部依次处理的它处理好了之后会给出一个最终答案final answer并且把这个final answer输出到屏幕上到这里主链路就结束了可以看到这段代码的核心是react-agents我们来看一下它里面写了些什么首先它这里定义了一些自身的属性分别是工具列表模型项目目录和模型电话客户端到这里构造函数就结束了后面我们要看的函数便是这个agent的重点这个函数的参数是用户输入的任务在函数的内部它先构建了一个message列表里面有两个元素分别是系统提示词

--- 文件: segment_force_1757411270.wav ---
和用户问题系统提示词是用renderSystemPrompts这个函数来渲染的它接受一个参数是系统提示词模板模板里面的内容是这个样子的跟我们之前讲的系统提示词基本上是一样的只不过这个模板里面有一些站位符比如说是工具列表操作系统当前目录下的文件列表等等这些站位符都是renderSystemPrompts函数在运行的时候填进去的在拼接好了message列表之后我们使用callmodel函数调用了模型拿到了模型的执行结果然后我们提取出返回结果中的source部分并且打印了出来然后代码会检测source之后的内容是不是final answer如果是的话我们返回这个final answer函数执行到此结束如果不是的话那就

--- 文件: segment_force_1757411301.wav ---
Content里面一定就包含action了我们此时就把action给解析出来提取出其中的函数名和参数列表然后判断了下当前工具是不是运行终端命令的工具如果是的话我们会提示用户是否继续因为运行终端命令比较危险所以现在一般用于编程的agent都会在运行终端命令之前主动询问用户是否要执行之后没有问题的话我们就会去执行工具背后的函数了并且把执行结果放到observation里面再把observation放到message列表里面因为我们在一个quad循环里面所以我们下一步还会来到循环的开头这里继续请求模型我们给call model这个函数传了message列表作为参数工具执行结果不是作为onset的

--- 文件: segment_1757411315.wav ---
Observation放到了Message列表里面了吗而Message又传给了模型这样模型就可以拿到工具的执行结果了它进而就可以根据工具的执行结果推测下一步要干什么所以总结一下这个Wire循环做的事情请求模型提取thoughts检测final answer

--- 文件: segment_force_1757411347.wav ---
提取action并执行其中的工具这个过程会一直重复下去直到模型返回了final answer为止回想一下这正是我们之前所提到的react运行流程为了确保你彻底明白这其中发生了什么我们来画个agent的流程图整个流程图里面有两个角色用户和agent而agent又可以分成三个部分分别是模型工具也就是函数还有agent的主程序agent主程序这个词我们之前没有提过其实就是agent里面负责串联整个流程的代码逻辑它会在合适的时候或者是模型等等你可以大致理解为我们刚才代码里面的那个软函数

--- 文件: segment_force_1757411377.wav ---
下面我们就来画个流程图看看这四个角色之间是怎么沟通的在用户提交任务之后任务先到了agent主程序这里agent主程序会先去调用模型模型返回thought和actionagent主程序把thought和action打印给用户看然后去调用action里面的指定工具工具执行完毕之后返回结果agent主程序把结果发回给用户看然后把这个工具执行结果加入到历史消息列表里面然后再次重复这个框中的流程也就是请求模型并处理thought action和observation的逻辑直到某个时刻在请求模型后模型认为用户的任务已经完成了不需要再利用工具了它就会返回thought和final answer

--- 文件: segment_force_1757411409.wav ---
Agent的主程序把Source和FinalAnswer展示给用户看整个流程就结束了这就是一个完整的React Agent的问答流程前面我们讲了如何使用React模式来构建一个AgentReact是目前最常见使用最广泛的Agent构建模式但它不是唯一的方案除了React之外还有很多其他的运行模式其中很多Agent的运行过程就是先规划再执行比如我们之前演示过的Manus如果你仔细看的话就会发现它在一开始回答的时候会构建一个代办列表后面的执行过程都是遵循代办列表来而Cloud Code中也会经常看到这种先创建突度 再去执行的情况这种先规划再执行的模式目前并没有一个统一的名字而且每个Agent都会有一个代办列表这就是一个完整的ReactAgent的问答流程这就是一个完整的ReactAgent的问答流程这就是一个完整的ReactAgent的问答流程

--- 文件: segment_force_1757411442.wav ---
Agent的实现多多少少也会有些差别我们今天来讲一个其中比较有名的实现是狼圈提出来的Plan and Execute模式从总体上来看它也是遵循了先规划再执行的流程只不过它的流程引入了一些动态修改规划的环节这使得它的方案有了很大的灵活性我们先用实际图来画一下Plan and Execute模式的运行流程首先我们要搞清楚这个实际图里面有多少个角色粗分下来的话那肯定只有两个了一个是用户另外一个是Plan and Execute Agent不过既然要研究我们就要如实展开这个Plan and Execute Agent的运行流程我们就肯定要搞清楚这个Agent的组成部分首先它里面有一个负责出执行计划的模型我们称它为Plan模型我们在运行这个金oa上通常会员的身份就是观察员和旗舰队长有然后 Another用手机的负责人可以进行待命的执行当时的只有8个而他们的怀疑有就是监控家因为选项内 contains就只是跟人一个人一模一样的查看出来Create如果他们的实情有很浅的変化

